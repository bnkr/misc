#!/usr/bin/ruby -w
# Copyright (C) 2010, James Webber.  Distributed under a 3-clause BSD license;
# see COPYING.
#
# Parses relevant information from the spamdump of a ruby test including
# filtering not implemented tests and ignoring failures we already know about.
#
# See: $0 --help

require 'pathname'
require 'optparse'

base = (Pathname.new(__FILE__).realpath.dirname + "./rtriage-lib")
require base + "./utility.rb"
require base + "./statefullogparser.rb"
require base + "./logfileparser.rb"
require base + "./settings.rb"

module Triage
  # Interface to the persistant state file and user configuration of that staet.
  class State
    def initialize(settings, state_file, config_file)
      @settings = settings
      load_state(state_file)
      load_config(config_file)
    end

    # Update the state given the new data.
    def update!(data)
      fail "not implemented"

      #   In the YAML file:
      #
      #   * state date
      #   * list of known failing tests:
      #     * date found
      #     * status in [ignored, not implemented, broken]
      #     * known: true | false
      #     * hidden: true
      #     * reason/message
      #     * comment from the user
      #   * other data can be added later, such as command to run to get the test logs
      #     etc.
      #
      # We should leave it open to have multiple sources for the yaml file
      # because the general state info will be quite confusing when all  you
      # really want to do is apply some config to one or two tests.

      # * add all failing tests which are not in the file
      # * update any existing tests, preserving the user's settings about them
      # * change the date of the state

      # Note: these bits might change a fair bit depending on how we load and
      # store stuff.  There might be further classes which do the loading and
      # storing individually.

      state_writer = StateWriter.new(@state_file)
      data.each {|d|
        current = info(d)
        if current
          # The merge is probably unnecessary because we'll put user data in a
          # different file, but just to be safe...
          state_writer.add(StateEntry.from_error_and_config(d, current))
        else
          # This is always true for now, but might not always be
          next if e.success?
          state_writer.add(StateEntry.from_error(d))
        end
      }
      writer.commit

      config_writer = ConfigWriter.new(@user_config, @config_file)
      current_state.each {|e|
        config_writer.delete(e) if e.success?
      }
      config_writer.commit
    end

    # Get the persistant state information for a particular error.
    def info(e)
    end

    private

    # The config is a set of directives to apply to data about tests in the
    # state.
    def load_config(name)
    end

    # The state is a big list of tests and what happened with them.
    def load_state(name)
    end
  end

  # Extracting errors from the log.  This turns the raw parsed data into what we
  # really need.
  class DataExtractor
    # Initialised after each_error is called.
    attr_reader :totals

    def initialize(settings, state, input_file)
      @settings = settings
      @state = state
      @input_file = input_file
      @totals = nil
    end

    # Parse the file, process the data, and yield it.
    def each_error(&blk)
      lp = StatefulLogParser.new
      File.open(@input_file.to_s, 'r') {|io|
        io.each_line {|l|
          lp.line(l) {|e|
            process_and_yield(e, &blk)
          }
        }
      }
      lp.finish
      @totals = lp.totals
      nil
    end

    private

    # Set new fields in e so we have a fully valid and queryable interface about
    # the error and its relationship to the state.
    def process_and_yield(e, &blk)
      # call state.info(e) and inspect the result
      yield e
    end
  end

  # Queryable interface to all the data.  Only needed when we're going to modify
  # the state.
  class DataStore
    def add(e)
      # we'll deal with this one later because it depends on how the state
      # updating works.
    end
  end

  # Handle the state of printing out errors.
  class ErrorPrinter
    def initialize(settings)
      @last_class = nil
    end

    # +parser+ is needed for the meta-info (e.g. suite name).
    def print(parser, error_data)
      e = error_data
      # we'll need settings regarding this
      failure = LogFileParser::TypeFailure
      error = LogFileParser::TypeError
      if e.type == error && e.message == 'not implemented'
        return
      elsif e.message =~ /not implemented/
        return
      end

      if @last_class != e.test_class
        @last_class = e.test_class
        puts "* #{e.test_class}"
      end

      puts "  - #{e.test_name}"
      puts "    #{e.message.match(/^[^\n]+/)}"
    end

    # Handle the unit counts.
    def totals(t)
    end
  end

  # Output manager, using the TestData and State information to produce a full
  # report.
  class Report
    attr_accessor :totals

    def initialize(settings, state)
      @settings = settings
      # TODO:
      #   state should not really be necessary if DataExtractor has done all the
      #   processing.
      @state = state
    end

    # Add processed data (from DataExtractor) to the report if relevant
    def add_if_relevant(data)
      return if ! relevant?(data)
    end

    def display
      p = ErrorPrinter.new(@settings)
      # iterate given data and print it sensibly.

      # Make something like:
      #
      #   Changes since $old_data:
      #
      #   Unit::method -- $state (was $state) # use colors
      #   Message (if long)
      #   location / comamnd to run the test
      #
      #   Tests in the same state since $old_data: (if --all)
      #
      #   Unit::method -- $state
      #   known about since $date
      #   message (if --long)
      #   location / comamnd to run the test
    end

    private

    # Decide if we want what's in the processed error data.
    def relevant?(e)
      # if e.state_changed?
      # else
      #
      true
    end
  end

  # Entry point for the program's command-line.
  class CommandLine
    def initialize(args)
      @args = args
      @settings = nil
    end

    def run!
      @settings = Settings.new.parse!(@args)
      state = State.new(@settings, @settings.state_file)
      report = Report.new(@settings, state)
      data = DataStore.new

      extractor = DataExtractor.new(@settings, state, @settings.log_file)
      extractor.each_error {|e|
        report.add_if_relevant(e)
        data.add(e)
      }
      report.totals = extractor.totals
      report.display

      if @settings.update_state?
        state.update!(data)
      end
    end
  end
end

Triage::CommandLine.new(ARGV).run!
